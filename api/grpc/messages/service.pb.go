// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: api/grpc/messages/service.proto

package messages

import (
	context "context"
	pb "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*ReceiveRequest_Start
	//	*ReceiveRequest_Ack
	Command isReceiveRequest_Command `protobuf_oneof:"command"`
}

func (x *ReceiveRequest) Reset() {
	*x = ReceiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_messages_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRequest) ProtoMessage() {}

func (x *ReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_messages_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRequest.ProtoReflect.Descriptor instead.
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return file_api_grpc_messages_service_proto_rawDescGZIP(), []int{0}
}

func (m *ReceiveRequest) GetCommand() isReceiveRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ReceiveRequest) GetStart() *ReceiveCommandStart {
	if x, ok := x.GetCommand().(*ReceiveRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *ReceiveRequest) GetAck() *ReceiveCommandAck {
	if x, ok := x.GetCommand().(*ReceiveRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

type isReceiveRequest_Command interface {
	isReceiveRequest_Command()
}

type ReceiveRequest_Start struct {
	Start *ReceiveCommandStart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type ReceiveRequest_Ack struct {
	Ack *ReceiveCommandAck `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*ReceiveRequest_Start) isReceiveRequest_Command() {}

func (*ReceiveRequest_Ack) isReceiveRequest_Command() {}

type ReceiveCommandStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubId string `protobuf:"bytes,1,opt,name=subId,proto3" json:"subId,omitempty"`
}

func (x *ReceiveCommandStart) Reset() {
	*x = ReceiveCommandStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_messages_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveCommandStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveCommandStart) ProtoMessage() {}

func (x *ReceiveCommandStart) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_messages_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveCommandStart.ProtoReflect.Descriptor instead.
func (*ReceiveCommandStart) Descriptor() ([]byte, []int) {
	return file_api_grpc_messages_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReceiveCommandStart) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

type ReceiveCommandAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *ReceiveCommandAck) Reset() {
	*x = ReceiveCommandAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_grpc_messages_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveCommandAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveCommandAck) ProtoMessage() {}

func (x *ReceiveCommandAck) ProtoReflect() protoreflect.Message {
	mi := &file_api_grpc_messages_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveCommandAck.ProtoReflect.Descriptor instead.
func (*ReceiveCommandAck) Descriptor() ([]byte, []int) {
	return file_api_grpc_messages_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReceiveCommandAck) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

var File_api_grpc_messages_service_proto protoreflect.FileDescriptor

var file_api_grpc_messages_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x61, 0x77, 0x61, 0x6b, 0x61, 0x72, 0x69, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x77, 0x61, 0x6b, 0x61, 0x72, 0x69, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x77, 0x61, 0x6b,
	0x61, 0x72, 0x69, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x2b, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x32, 0x4a, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x77, 0x61,
	0x6b, 0x61, 0x72, 0x69, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x13, 0x5a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_grpc_messages_service_proto_rawDescOnce sync.Once
	file_api_grpc_messages_service_proto_rawDescData = file_api_grpc_messages_service_proto_rawDesc
)

func file_api_grpc_messages_service_proto_rawDescGZIP() []byte {
	file_api_grpc_messages_service_proto_rawDescOnce.Do(func() {
		file_api_grpc_messages_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_grpc_messages_service_proto_rawDescData)
	})
	return file_api_grpc_messages_service_proto_rawDescData
}

var file_api_grpc_messages_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_grpc_messages_service_proto_goTypes = []interface{}{
	(*ReceiveRequest)(nil),      // 0: awakari.messages.ReceiveRequest
	(*ReceiveCommandStart)(nil), // 1: awakari.messages.ReceiveCommandStart
	(*ReceiveCommandAck)(nil),   // 2: awakari.messages.ReceiveCommandAck
	(*pb.CloudEvent)(nil),       // 3: pb.CloudEvent
}
var file_api_grpc_messages_service_proto_depIdxs = []int32{
	1, // 0: awakari.messages.ReceiveRequest.start:type_name -> awakari.messages.ReceiveCommandStart
	2, // 1: awakari.messages.ReceiveRequest.ack:type_name -> awakari.messages.ReceiveCommandAck
	0, // 2: awakari.messages.Service.Receive:input_type -> awakari.messages.ReceiveRequest
	3, // 3: awakari.messages.Service.Receive:output_type -> pb.CloudEvent
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_grpc_messages_service_proto_init() }
func file_api_grpc_messages_service_proto_init() {
	if File_api_grpc_messages_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_grpc_messages_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_messages_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveCommandStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_grpc_messages_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveCommandAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_grpc_messages_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReceiveRequest_Start)(nil),
		(*ReceiveRequest_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_grpc_messages_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_grpc_messages_service_proto_goTypes,
		DependencyIndexes: file_api_grpc_messages_service_proto_depIdxs,
		MessageInfos:      file_api_grpc_messages_service_proto_msgTypes,
	}.Build()
	File_api_grpc_messages_service_proto = out.File
	file_api_grpc_messages_service_proto_rawDesc = nil
	file_api_grpc_messages_service_proto_goTypes = nil
	file_api_grpc_messages_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// Start receiving a messages for a certain subscription id.
	// Client should send the acknowledgement for every received message.
	Receive(ctx context.Context, opts ...grpc.CallOption) (Service_ReceiveClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Receive(ctx context.Context, opts ...grpc.CallOption) (Service_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/awakari.messages.Service/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceReceiveClient{stream}
	return x, nil
}

type Service_ReceiveClient interface {
	Send(*ReceiveRequest) error
	Recv() (*pb.CloudEvent, error)
	grpc.ClientStream
}

type serviceReceiveClient struct {
	grpc.ClientStream
}

func (x *serviceReceiveClient) Send(m *ReceiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceReceiveClient) Recv() (*pb.CloudEvent, error) {
	m := new(pb.CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// Start receiving a messages for a certain subscription id.
	// Client should send the acknowledgement for every received message.
	Receive(Service_ReceiveServer) error
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Receive(Service_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Receive(&serviceReceiveServer{stream})
}

type Service_ReceiveServer interface {
	Send(*pb.CloudEvent) error
	Recv() (*ReceiveRequest, error)
	grpc.ServerStream
}

type serviceReceiveServer struct {
	grpc.ServerStream
}

func (x *serviceReceiveServer) Send(m *pb.CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceReceiveServer) Recv() (*ReceiveRequest, error) {
	m := new(ReceiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "awakari.messages.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Service_Receive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/grpc/messages/service.proto",
}
